package ie.gmit.sw;

import java.io.File;
import java.io.FilenameFilter;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ConcurrentSkipListMap;

public class CosineDistance {
  private Processor processor;
  private String subjectFileDir;
  private String queryFile;
  private ShingleProcessor shingleProcessor;
  private Map<String, List<Index>> db = new ConcurrentSkipListMap<>();
  private BlockingQueue<Word> queue = new ArrayBlockingQueue<>(10000);
  private Integer fileCount;
  
  public CosineDistance() {
    processor = new Processor(this.queue);
  }
  
  public void processSubjectFiles() {
    File[] files = new File(getSubjectFileDir()).listFiles(new FilenameFilter() {
      public boolean accept(File current, String name) {
        return new File(current, name).isFile();
      }
    });
    
    File queryFile = new File(getQueryFile());
    new Thread(new ShingleProcessor(queue, db, queryFile.getName())).start();
    System.out.println(queryFile.getName());
    this.fileCount = files.length + 1;
    processor.processFiles(queryFile, files, fileCount);
    processShingles(fileCount);
  }
  
  public void processShingles(int fileCount) {
    //for(int i = 0; i < fileCount; i++) {
      //new Thread(new ShingleProcessor(queue, db, this.fileCount)).start();
      //new Thread(new ShingleProcessor(queue, db, this.fileCount)).start();
    //}
  }

  public String getQueryFile() {
    return queryFile;
  }

  public void setQueryFile(String queryFile) {
    this.queryFile = queryFile;
  }

  public Processor getProcessor() {
    return processor;
  }

  public void setProcessor(Processor processor) {
    this.processor = processor;
  }

  public String getSubjectFileDir() {
    return subjectFileDir;
  }

  public void setSubjectFileDir(String subjectFileDir) {
    this.subjectFileDir = subjectFileDir;
  }
}
