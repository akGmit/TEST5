package ie.gmit.sw;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.concurrent.BlockingQueue;

public class FileParser implements Runnable {
  private BlockingQueue<Word> queue;
  private File file;

  public FileParser(BlockingQueue<Word> queue, File file) {
    this.queue = queue;
    this.file = file;
  }

  @Override
  public void run() {
    System.out.println("File parser running");
    String line = null;
    
    String fileName = file.getName();
    if(Thread.currentThread().getName().equalsIgnoreCase("queryThread")) {
      fileName = "queryFile";
    }
    
    try {
      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file)));

      while((line = br.readLine()) != null) {
        if(line.length() > 0) {
          
          String[] words = line.trim().toLowerCase().replaceAll("[^A-Za-z0-9 ]", "").split(" ");
          int len = words.length;
          int count = 0;
          System.out.println(len);
          
          if(len % 3 == 0) {
            String shingle = "";
            for(String s : words) {
              count++;
              shingle += s + " ";
              if(count == 3) {
                System.out.println(shingle);
                queue.put(new Word(fileName, shingle.trim()));
                count = 0;
                shingle = "";
              }
            }
          }
          
          if(len % 3 != 0) {
            if(len < 3) {
              String shingle = "";
              for(String s : words) {
                shingle += s + " ";
                queue.put(new Word(fileName,shingle.trim()));
              }
              System.out.println("Not modules less than 3: "   + shingle);
            }
            
            if(len > 3) {
              int left = len % 3;
              int leftCount = len;
              count = 0;
              String shingle = "";
              for(String s : words) {
                
                count++;
                if(leftCount > left) {
                  System.out.println("In larger " + leftCount);
                  shingle += s + " ";
                  if(count == 3) {
                    System.out.println("MORE " + shingle);
                    queue.put(new Word(fileName, shingle.trim()));
                    count = 0;
                    shingle = "";
                  }
                }else
                if(leftCount <= left) {
                  shingle += s + " ";
                  System.out.println(leftCount);
                  System.out.println(count);
                  if(leftCount == 0) {
                    System.out.println("LESS: " + shingle);
                    queue.put(new Word(fileName, shingle.trim()));
                    count = 0;
                    shingle = "";
                  }
                }
                leftCount--;
              }
            }
          }
          
          
          
          /*int count = 0;
          String shingle = "";
          for(String s : words) {
            //System.out.println(s);
            shingle += s + " ";
            count++;
            if(count == 3) {
              queue.put(new Word(fileName, shingle.trim()));
              count = 0;
              shingle = "";
            }
          } */
        }
      }
      queue.put(new Poison(fileName, "end"));
      br.close();
    } catch (FileNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (IOException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (InterruptedException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
  }

}
